%{
    #include "output.hpp"
    #include <iostream>
    using namespace output;
    using namespace std;
    extern int yylineno;
    extern int yylex();
    void yyerror(const char* message);
%}


%token TRUE 
%token FALSE 
%token SC 
%token ELSE 
%token LPAREN 
%token ID 
%token BREAK 
%token VOID 
%token INT
%token B 
%token BOOL 
%token NUM 
%token STRING
%token RETURN
%token BYTE 
%token AUTO 
%token CONTINUE 
%token WHILE 
%token IF 
%token LBRACE 
%token COMMA 


%right ASSIGN
%left RELOP
%left ADD 
%left SUB
%left MUL
%left DIV
%left OR
%left AND
%left RPAREN
%left RBRACE
%nonassoc ELSE
%right NOT


%%

Program : Funcs	        	                       { output::printProductionRule(1); }
;
Funcs :   /*epsilon*/	        	               { output::printProductionRule(2); }
          | FuncDecl Funcs	        	           { output::printProductionRule(3); }
;
FuncDecl : RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE        { output::printProductionRule(4); }
;
RetType : VOID	        	                       { output::printProductionRule(6); }
          | Type	        	                   { output::printProductionRule(5); }
;
Formals : /*epsilon*/	        	               { output::printProductionRule(7); }
          | FormalsList	        	               { output::printProductionRule(8); }
;
FormalsList : FormalDecl COMMA FormalsList	       { output::printProductionRule(10); }
              | FormalDecl	                 	   { output::printProductionRule(9); }
;
FormalDecl : Type ID	        	               { output::printProductionRule(11); }
;
Statements : Statements Statement	               { output::printProductionRule(13); }
             | Statement	                       { output::printProductionRule(12); }
;
Statement : CONTINUE SC	                           { output::printProductionRule(26); }
            | BREAK SC	        	               { output::printProductionRule(25); }
            | WHILE LPAREN Exp RPAREN Statement	   { output::printProductionRule(24); }            
            | IF LPAREN Exp RPAREN Statement ELSE Statement                 { output::printProductionRule(23); }
			| IF LPAREN Exp RPAREN Statement	   { output::printProductionRule(22); }
			| RETURN Exp SC	        	           { output::printProductionRule(21); }
			| RETURN SC	        	               { output::printProductionRule(20); }
			| Call SC	        	               { output::printProductionRule(19); }
			| ID ASSIGN Exp SC	        	       { output::printProductionRule(18); }
			| AUTO ID ASSIGN Exp SC	               { output::printProductionRule(17); }
            | Type ID ASSIGN Exp SC	               { output::printProductionRule(16); }
        	| Type ID SC	        	           { output::printProductionRule(15); }
            | LBRACE Statements RBRACE	           { output::printProductionRule(14); }
;
Call : ID LPAREN ExpList RPAREN	       { output::printProductionRule(27); }
       | ID LPAREN RPAREN	           { output::printProductionRule(28); }
;
ExpList : Exp	        	           { output::printProductionRule(29); }
          | Exp COMMA ExpList	       { output::printProductionRule(30); }
;
Type :   BYTE	        	           { output::printProductionRule(32); }
       | BOOL	        	           { output::printProductionRule(33); }
       | INT	        	           { output::printProductionRule(31); }
;
Exp : LPAREN Exp RPAREN	        	   { output::printProductionRule(34); }
      | TRUE	        	           { output::printProductionRule(41); }
      | FALSE	        	           { output::printProductionRule(42); }
      | Exp DIV Exp	        	       { output::printProductionRule(35); }
      | Exp MUL Exp	        	       { output::printProductionRule(35); }
      | NOT Exp	        	           { output::printProductionRule(43); }
      | Exp OR Exp	        	       { output::printProductionRule(45); }
      | STRING	        	           { output::printProductionRule(40); }
      | ID	        	               { output::printProductionRule(36); }
      | LPAREN Type RPAREN Exp	       { output::printProductionRule(47); }
      | Call	        	           { output::printProductionRule(37); }
      | Exp ADD Exp	        	       { output::printProductionRule(35); }
      | Exp SUB Exp	        	       { output::printProductionRule(35); }
      | Exp RELOP Exp	        	   { output::printProductionRule(46); }
      | Exp AND Exp	        	       { output::printProductionRule(44); }
      | NUM	        	               { output::printProductionRule(38); }
      | NUM B	        	           { output::printProductionRule(39); }
;

%%

void yyerror(const char* message) {
    output::errorSyn(yylineno);
    exit(0);
}

int main() {
    return yyparse();
}