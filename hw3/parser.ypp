%{
#include <stdio.h>
#include "parse_utils.h"
#include <iostream>
#include "hw3_output.hpp"
using namespace std;
using namespace output;
extern int yylex();
extern int yylineno;
void yyerror(const char* message);
%}


%token TRUE
%token FALSE
%token RETURN
%token ID
%token NUM
%token VOID
%token INT
%token IF
%token SC
%token BOOL
%token COMMA
%token WHILE
%token BREAK
%token STRING
%token BYTE
%token B
%token CONTINUE
%token AUTO 
%token COLON



%right ASSIGN

%left OR

%left AND

%left EQUAL_UNEQUAL

%nonassoc NOT_EQUALITY

%left ADD
%left SUB

%left MUL 
%left DIV

%right NOT

%left LBRACE
%left RBRACE
%left LPAREN 
%left RPAREN

// highest priority in order to take care of dangaling else

%right ELSE

%%

Prog: Functions
    {}
Functions:  %empty
    {Utils::instance().pFunctions(yylineno);}
Functions: FunctionDeclaration Functions
    {Utils::instance().pFunctions(yylineno);}
FunctionDeclaration: FunctionHead LBRACE States  RBRACE PopScope  
    {Utils::instance().pFunctionDeclaration(yylineno);}
FunctionHead: ReturnType ID LPAREN Formals RPAREN
    {$$ = Utils::instance().parseFunctionDef( $1, $2, $4, yylineno);}
ReturnType: VOID
    {$$ = Utils::instance().pReturnType(yylineno);}
ReturnType: Type
    {$$ = Utils::instance().pReturnType( $1, yylineno);}
Formals: %empty
    {$$ = Utils::instance().pFormals(yylineno);}
Formals: FormalsList
    {$$ = Utils::instance().pFormals( $1, yylineno);}
FormalsList: FormalDeclaration
    {$$ = Utils::instance().pFormList( $1, yylineno);}
FormalsList: FormalDeclaration COMMA FormalsList
    {$$ = Utils::instance().pFormList( $1, $3, yylineno);}
FormalDeclaration: Type ID
    {$$ = Utils::instance().ParseFormalDecl($1, $2, yylineno);}
States: State
    {Utils::instance().parseState(yylineno);}
States: States State
    {Utils::instance().parseState(yylineno);}
State: PushStatementScope LBRACE States RBRACE PopScope
    {Utils::instance().parseStateOfState(yylineno);}
State: Type ID SC
    {Utils::instance().parseStateType($1, $2, yylineno);}
State: Type ID ASSIGN  Expression SC
    {Utils::instance().parseStateTypeAssignment( $1, $2, $4, yylineno);}
State: Pre_Auto AUTO ID ASSIGN Expression SC
    {Utils::instance().parseAutoTypeAssignment( $1, $3, $5, yylineno);}
State: ID ASSIGN Expression SC
    {Utils::instance().parseStateAssignment( $1, $3, yylineno);}
State: Call SC
    {Utils::instance().parseStateCallFunc(yylineno);}
State: RETURN SC
    {Utils::instance().parseStateRet(yylineno);}
State: RETURN  Expression SC
    {Utils::instance().parseStateRetExpression( $2, yylineno);}
State: IF LPAREN  Expression CheckBool RPAREN PushStatementScope State PopScope
    {Utils::instance().parseStateIf(yylineno);}
State: IF LPAREN  Expression CheckBool RPAREN PushStatementScope State PopScope ELSE PushStatementScope State PopScope
    {Utils::instance().parseStateElseIF(yylineno);}

State: CONTINUE SC
    {Utils::instance().parseStateContinue(yylineno);}
State: BREAK SC
    {Utils::instance().parseStateBreak(yylineno);}
State: WHILE LPAREN  Expression CheckBool RPAREN PushWhileScope State PopScope
    {Utils::instance().parseStatemeWhile(yylineno);}

Call: ID LPAREN  ExpressionList RPAREN
    {$$ = Utils::instance().pCall( $1, $3, yylineno);}
Call: ID LPAREN RPAREN
    {$$ = Utils::instance().pCall( $1, yylineno);}
ExpressionList:  Expression
    {$$ = Utils::instance().pExpressionList( $1, yylineno);}
ExpressionList:  Expression COMMA  ExpressionList
    {$$ = Utils::instance().pExpressionList( $1, $3, yylineno);}

Type: BOOL
    {$$ = Utils::instance().pBool(yylineno);}
Type: BYTE
    {$$ = Utils::instance().pByte(yylineno);}
Type: INT
    {$$ = Utils::instance().pInt(yylineno);}

Pre_Auto: %empty
    {$$ = Utils::instance().pAuto(yylineno);}
Expression: LPAREN  Expression RPAREN
    {$$ = Utils::instance().pParen( $2, yylineno);}
Expression:  Expression DIV  Expression
    {$$ = Utils::instance().pBinaryOp( $1, $3, yylineno);}
Expression:  Expression MUL  Expression
    {$$ = Utils::instance().pBinaryOp( $1, $3, yylineno);}
Expression:  Expression SUB  Expression
    {$$ = Utils::instance().pBinaryOp( $1, $3, yylineno);}
Expression:  Expression ADD  Expression
    {$$ = Utils::instance().pBinaryOp( $1, $3, yylineno);}
Expression: ID
    {$$ = Utils::instance().pId( $1, yylineno);}
Expression: Call
    {$$ = Utils::instance().pCallExpression( $1, yylineno);}
Expression: NUM
    {$$ = Utils::instance().pNum( $1, yylineno);}
Expression: NUM B
    {$$ = Utils::instance().pNumB( $1, yylineno);}
Expression: STRING
    {$$ = Utils::instance().pString( $1, yylineno);}

Expression: FALSE
    {$$ = Utils::instance().pFalse(yylineno);}
Expression: TRUE
    {$$ = Utils::instance().pTrue(yylineno);}

Expression: NOT  Expression
    {$$ = Utils::instance().pNot( $2, yylineno);}
Expression:  Expression OR  Expression
    {$$ = Utils::instance().pOr( $1, $3, yylineno);}
Expression:  Expression AND  Expression
    {$$ = Utils::instance().pAnd( $1, $3, yylineno);}
Expression:  Expression NOT_EQUALITY  Expression
    {$$ = Utils::instance().pRelOprator( $1, $3, yylineno);}
Expression:  Expression EQUAL_UNEQUAL  Expression
    {$$ = Utils::instance().pRelOprator( $1, $3, yylineno);}

Expression: LPAREN Type RPAREN  Expression
    {$$ = Utils::instance().pCast($2, $4, yylineno);}
PushStatementScope: %empty
    {Utils::instance().pAddStateScope(yylineno);}
PushWhileScope: %empty
    {Utils::instance().pAddWhileScope(yylineno);}
PopScope: %empty
    {Utils::instance().pPopScope(yylineno);}
CheckBool : %empty
    {Utils::instance().pCheckBool( $0, yylineno);}
%%

void yyerror(const char * message)
{
	errorInSyntax(yylineno);
	exit(0);
}