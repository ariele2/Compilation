%{
#include <stdio.h>
#include "utils.h"
#include <iostream>
#include "hw3_output.hpp"
using namespace std;
using namespace output;
extern int yylex();
extern int yylineno;
void yyerror(const char* message);
%}


%token TRUE
%token FALSE
%token RETURN
%token ID
%token NUM
%token VOID
%token INT
%token IF
%token SC
%token BOOL
%token COMMA
%token WHILE
%token BREAK
%token STRING
%token BYTE
%token B
%token CONTINUE
%token AUTO 
%token COLON



%right ASSIGN

%left OR

%left AND

%left EQUAL_UNEQUAL

%nonassoc NOT_EQUALITY

%left ADD
%left SUB

%left MUL 
%left DIV

%right NOT

%left LBRACE
%left RBRACE
%left LPAREN 
%left RPAREN

// highest priority in order to take care of dangaling else

%right ELSE

%%

Program: Funcs
    {}
Funcs:  %empty
    {ParseUtils::instance().ParseFuncs(yylineno);}
Funcs: FuncDecl Funcs
    {ParseUtils::instance().ParseFuncs(yylineno);}
FuncDecl: FuncHead LBRACE Statements  RBRACE PopScope  // pushing scope inside FuncHead too
    {ParseUtils::instance().ParseFuncDecl(yylineno);}
FuncHead: RetType ID LPAREN Formals RPAREN
    {$$ = ParseUtils::instance().ParseFuncHead(yylineno, $1, $2, $4);}
RetType: Type
    {$$ = ParseUtils::instance().ParseRetType(yylineno, $1);}
RetType: VOID
    {$$ = ParseUtils::instance().ParseRetType(yylineno);}
Formals: %empty
    {$$ = ParseUtils::instance().ParseFormals(yylineno);}
Formals: FormalsList
    {$$ = ParseUtils::instance().ParseFormals(yylineno, $1);}
FormalsList: FormalDecl
    {$$ = ParseUtils::instance().ParseFormalsList(yylineno, $1);}
FormalsList: FormalDecl COMMA FormalsList
    {$$ = ParseUtils::instance().ParseFormalsList(yylineno, $1, $3);}
FormalDecl: Type ID
    {$$ = ParseUtils::instance().ParseFormalDecl(yylineno, $1, $2);}
Statements: Statement
    {ParseUtils::instance().ParseStatements(yylineno);}
Statements: Statements Statement
    {ParseUtils::instance().ParseStatements(yylineno);}
Statement: PushStatementScope LBRACE Statements RBRACE PopScope
    {ParseUtils::instance().ParseStatementOfStatements(yylineno);}
Statement: Type ID SC
    {ParseUtils::instance().ParseStatementType(yylineno, $1, $2);}
Statement: Type ID ASSIGN Exp SC
    {ParseUtils::instance().ParseStatementTypeAssign(yylineno, $1, $2, $4);}
Statement: ID ASSIGN Exp SC
    {ParseUtils::instance().ParseStatementAssign(yylineno, $1, $3);}
Statement: Call SC
    {ParseUtils::instance().ParseStatementCall(yylineno);}
Statement: RETURN SC
    {ParseUtils::instance().ParseStatementReturn(yylineno);}
Statement: RETURN Exp SC
    {ParseUtils::instance().ParseStatementReturnExp(yylineno, $2);}
Statement: IF LPAREN Exp CheckBool RPAREN PushStatementScope Statement PopScope
    {ParseUtils::instance().ParseStatementIf(yylineno);}
Statement: IF LPAREN Exp CheckBool RPAREN PushStatementScope Statement PopScope ELSE PushStatementScope Statement PopScope
    {ParseUtils::instance().ParseStatementIfElse(yylineno);}
Statement: WHILE LPAREN Exp CheckBool RPAREN PushWhileScope Statement PopScope
    {ParseUtils::instance().ParseStatementWhile(yylineno);}
Statement: BREAK SC
    {ParseUtils::instance().ParseStatementBreak(yylineno);}
Statement: CONTINUE SC
    {ParseUtils::instance().ParseStatementContinue(yylineno);}
Call: ID LPAREN ExpList RPAREN
    {$$ = ParseUtils::instance().ParseCall(yylineno, $1, $3);}
Call: ID LPAREN RPAREN
    {$$ = ParseUtils::instance().ParseCall(yylineno, $1);}
ExpList: Exp
    {$$ = ParseUtils::instance().ParseExplist(yylineno, $1);}
ExpList: Exp COMMA ExpList
    {$$ = ParseUtils::instance().ParseExplist(yylineno, $1, $3);}
Type: INT
    {$$ = ParseUtils::instance().ParseInt(yylineno);}
Type: BYTE
    {$$ = ParseUtils::instance().ParseByte(yylineno);}
Type: BOOL
    {$$ = ParseUtils::instance().ParseBool(yylineno);}
Exp: LPAREN Exp RPAREN
    {$$ = ParseUtils::instance().ParseParentheses(yylineno, $2);}
Exp: Exp ADD Exp
    {$$ = ParseUtils::instance().ParseBinop(yylineno, $1, $3);}
Exp: Exp SUB Exp
    {$$ = ParseUtils::instance().ParseBinop(yylineno, $1, $3);}
Exp: Exp MUL Exp
    {$$ = ParseUtils::instance().ParseBinop(yylineno, $1, $3);}
Exp: Exp DIV Exp
    {$$ = ParseUtils::instance().ParseBinop(yylineno, $1, $3);}
Exp: ID
    {$$ = ParseUtils::instance().ParseID(yylineno, $1);}
Exp: Call
    {$$ = ParseUtils::instance().ParseCallExp(yylineno, $1);}
Exp: NUM
    {$$ = ParseUtils::instance().ParseNum(yylineno, $1);}
Exp: NUM B
    {$$ = ParseUtils::instance().ParseNumB(yylineno, $1);}
Exp: STRING
    {$$ = ParseUtils::instance().ParseString(yylineno, $1);}
Exp: TRUE
    {$$ = ParseUtils::instance().ParseTrue(yylineno);}
Exp: FALSE
    {$$ = ParseUtils::instance().ParseFalse(yylineno);}
Exp: NOT Exp
    {$$ = ParseUtils::instance().ParseNot(yylineno, $2);}
Exp: Exp AND Exp
    {$$ = ParseUtils::instance().ParseAnd(yylineno, $1, $3);}
Exp: Exp OR Exp
    {$$ = ParseUtils::instance().ParseOr(yylineno, $1, $3);}
Exp: Exp EQUAL_UNEQUAL Exp
    {$$ = ParseUtils::instance().ParseRelOp(yylineno, $1, $3);}
Exp: Exp NOT_EQUALITY Exp
    {$$ = ParseUtils::instance().ParseRelOp(yylineno, $1, $3);}
Exp: LPAREN Type RPAREN Exp
    {$$ = ParseUtils::instance().ParseCast(yylineno, $2, $4);}
PushStatementScope: %empty
    {ParseUtils::instance().ParsePushStatementScope(yylineno);}
PushWhileScope: %empty
    {ParseUtils::instance().ParsePushWhileScope(yylineno);}
PopScope: %empty
    {ParseUtils::instance().ParsePopScope(yylineno);}
CheckBool : %empty
    {ParseUtils::instance().ParseCheckBool(yylineno, $0);}
%%

void yyerror(const char * message)
{
	errorSyn(yylineno);
	exit(0);
}