%{
#include "compiler.h"
%}

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token TRUE
%token FALSE
%token RETURN
%token IF
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token ID
%token NUM
%token STRING
%token DOTS
%token SWITCH
%token CASE
%token DEFAULT
%token COLON

//priority 1
%right ASSIGN

//priority 3
%left OR

//priority 4
%left AND

// priority 8
%left EQUAL_UNEQUAL

// priority 9
%nonassoc INEQUALITY

// priority 11
%left PLUS_MINUS

// priority 12
%left MULT_DIV

// priority 14
%right NOT

// priority 16
%left LBRACKET RBRACKET LBRACE RBRACE LPAREN RPAREN

// top priority (dangling else)
%right ELSE
%%

Program: Funcs
    {}
Funcs:  %empty
    {Compiler::instance().ParseFuncs(yylineno);}
Funcs: FuncDecl Funcs
    {Compiler::instance().ParseFuncs(yylineno);}
FuncDecl: FuncHead LBRACE Statements GenNextLabel RBRACE
    {Compiler::instance().ParseFuncDecl(yylineno, $3, $4);}
FuncHead: RetType ID LPAREN Formals RPAREN
    {Compiler::instance().ParseFuncHead(yylineno, $1, $2, $4);}
RetType: Type
    {$$ = Compiler::instance().ParseRetType(yylineno, $1);}
RetType: VOID
    {$$ = Compiler::instance().ParseRetType(yylineno);}
Formals: %empty
    {$$ = Compiler::instance().ParseFormals(yylineno);}
Formals: FormalsList
    {$$ = Compiler::instance().ParseFormals(yylineno, $1);}
FormalsList: FormalDecl
    {$$ = Compiler::instance().ParseFormalsList(yylineno, $1);}
FormalsList: FormalDecl COMMA FormalsList
    {$$ = Compiler::instance().ParseFormalsList(yylineno, $1, $3);}
FormalDecl: Type ID
    {$$ = Compiler::instance().ParseFormalDecl(yylineno, $1, $2);}
Statements: Statement BranchNext
    {$$ = Compiler::instance().ParseStatements(yylineno, $1, $2);}
Statements: Statements BranchNext GenNextLabel Statement BranchNext
    {$$ = Compiler::instance().ParseStatements(yylineno, $1, $2, $3, $4, $5);}
Statement: PushStatementScope LBRACE Statements RBRACE PopScope
    {$$ = Compiler::instance().ParseStatementOfStatements(yylineno, $3);}
Statement: Type ID SC
    {$$ = Compiler::instance().ParseStatementType(yylineno, $1, $2);}
Statement: Type ID ASSIGN Exp SC
    {$$ = Compiler::instance().ParseStatementTypeAssign(yylineno, $1, $2, $4);}
Statement: ID ASSIGN Exp SC
    {$$ = Compiler::instance().ParseStatementAssign(yylineno, $1, $3);}
Statement: Call SC
    {$$ = Compiler::instance().ParseStatementCall(yylineno);}
Statement: RETURN SC
    {$$ = Compiler::instance().ParseStatementReturn(yylineno);}
Statement: RETURN Exp SC
    {$$ = Compiler::instance().ParseStatementReturnExp(yylineno, $2);}
Statement: IF LPAREN Exp CheckBool RPAREN PushStatementScope GenIfLabel Statement PopScope BranchIfNext
    {$$ = Compiler::instance().ParseStatementIf(yylineno, $3, $7, $8, $10);}
Statement: IF LPAREN Exp CheckBool RPAREN PushStatementScope GenIfLabel Statement PopScope BranchIfNext ELSE PushStatementScope GenElseLabel Statement PopScope
    {$$ = Compiler::instance().ParseStatementIfElse(yylineno, $3, $7, $8, $10, $13, $14);}
Statement: WHILE LPAREN BranchWhileHead GenWhileHeadLabel Exp CheckBool RPAREN PushWhileScope GenWhileBodyLabel Statement BranchWhileHead
    {$$ = Compiler::instance().ParseStatementWhile(yylineno, $3, $4, $5, $9, $10, $11);}
Statement: BREAK SC
    {$$ = Compiler::instance().ParseStatementBreak(yylineno);}
Statement: CONTINUE SC
    {$$ = Compiler::instance().ParseStatementContinue(yylineno);}
Statement: SWITCH LPAREN Exp CheckSwitchExp RPAREN BranchSwitchHead PushSwitchScope LBRACE CaseList RBRACE
    {$$ = Compiler::instance().ParseStatementSwitch(yylineno, $3, $6, $9);}
Call: ID LPAREN ExpList RPAREN
    {$$ = Compiler::instance().ParseCall(yylineno, $1, $3);}
Call: ID LPAREN RPAREN
    {$$ = Compiler::instance().ParseCall(yylineno, $1);}
ExpList: Exp ConvertBool
    {$$ = Compiler::instance().ParseExplist(yylineno, $2);}
ExpList: Exp ConvertBool COMMA ExpList
    {$$ = Compiler::instance().ParseExplist(yylineno, $2, $4);}
Type: INT
    {$$ = Compiler::instance().ParseInt(yylineno);}
Type: BYTE
    {$$ = Compiler::instance().ParseByte(yylineno);}
Type: BOOL
    {$$ = Compiler::instance().ParseBool(yylineno);}
Exp: LPAREN Exp RPAREN
    {$$ = Compiler::instance().ParseParentheses(yylineno, $2);}
Exp: Exp PLUS_MINUS Exp
    {$$ = Compiler::instance().ParseBinop(yylineno, $1, $2, $3);}
Exp: Exp MULT_DIV Exp
    {$$ = Compiler::instance().ParseBinop(yylineno, $1, $2, $3);}
Exp: ID
    {$$ = Compiler::instance().ParseID(yylineno, $1);}
Exp: Call
    {$$ = Compiler::instance().ParseCallExp(yylineno, $1);}
Exp: NUM
    {$$ = Compiler::instance().ParseNum(yylineno, $1);}
Exp: NUM B
    {$$ = Compiler::instance().ParseNumB(yylineno, $1);}
Exp: STRING
    {$$ = Compiler::instance().ParseString(yylineno, $1);}
Exp: TRUE
    {$$ = Compiler::instance().ParseTrue(yylineno);}
Exp: FALSE
    {$$ = Compiler::instance().ParseFalse(yylineno);}
Exp: NOT Exp
    {$$ = Compiler::instance().ParseNot(yylineno, $2);}
Exp: Exp AND GenAndLabel Exp
    {$$ = Compiler::instance().ParseAnd(yylineno, $1, $3, $4);}
Exp: Exp OR GenOrLabel Exp
    {$$ = Compiler::instance().ParseOr(yylineno, $1, $3, $4);}
Exp: Exp EQUAL_UNEQUAL Exp
    {$$ = Compiler::instance().ParseRelOp(yylineno, $1, $2, $3);}
Exp: Exp INEQUALITY Exp
    {$$ = Compiler::instance().ParseRelOp(yylineno, $1, $2, $3);}
CaseList: CaseDecl GenNextLabel CaseList
    {$$ = Compiler::instance().ParseCaseList(yylineno, $1, $2, $3);}
CaseList: CaseDecl
    {$$ = Compiler::instance().ParseCaseList(yylineno, $1);}
CaseList: DEFAULT COLON BranchDefaultHead GenDefaultLabel Statements
    {$$ = Compiler::instance().ParseCaseDefault(yylineno, $3, $4, $5);}
CaseDecl: CASE NUM COLON BranchCaseHead GenCaseDeclLabel Statements
    {$$ = Compiler::instance().ParseCaseDecl(yylineno, $2, $4, $5, $6);}

// ~~~ markers ~~~
// scope
PushStatementScope: %empty
    {Compiler::instance().ParsePushStatementScope(yylineno);}
PushWhileScope: %empty
    {Compiler::instance().ParsePushWhileScope(yylineno, $-3);}
PushSwitchScope: %empty
    {Compiler::instance().ParsePushSwitchScope(yylineno, $-3);}
PopScope: %empty
    {Compiler::instance().ParsePopScope(yylineno);}

// semantic
CheckSwitchExp: %empty
    {Compiler::instance().ParseCheckSwitchExp(yylineno, $0);}
CheckBool: %empty
    {Compiler::instance().ParseCheckBool(yylineno, $0);}

// label
GenIfLabel: %empty
    {$$ = Compiler::instance().ParseGenIfLabel(yylineno);}
GenElseLabel: %empty
    {$$ = Compiler::instance().ParseGenElseLabel(yylineno);}
GenWhileHeadLabel: %empty
    {$$ = Compiler::instance().ParseGenWhileHeadLabel(yylineno);}
GenWhileBodyLabel: %empty
    {$$ = Compiler::instance().ParseGenWhileBodyLabel(yylineno);}
GenAndLabel: %empty
    {$$ = Compiler::instance().ParseGenAndLabel(yylineno);}
GenOrLabel: %empty
    {$$ = Compiler::instance().ParseGenOrLabel(yylineno);}
GenNextLabel: %empty
    {$$ = Compiler::instance().ParseGenNextLabel(yylineno);}
GenDefaultLabel: %empty
   {$$ = Compiler::instance().ParseGenDefaultLabel(yylineno);}
GenCaseDeclLabel: %empty
   {$$ = Compiler::instance().ParseGenCaseDeclLabel(yylineno);}

// branch
BranchNext: %empty
    {$$ = Compiler::instance().ParseBranchNext(yylineno);}
BranchWhileHead: %empty
    {$$ = Compiler::instance().ParseBranchWhileHead(yylineno);}
BranchIfNext: %empty
    {$$ = Compiler::instance().ParseBranchIfNext(yylineno);}
BranchSwitchHead: %empty
    {$$ = Compiler::instance().ParseBranchSwitchHead(yylineno);}
BranchCaseHead: %empty
    {$$ = Compiler::instance().ParseBranchCaseHead(yylineno);}
BranchDefaultHead:%empty
    {$$ = Compiler::instance().ParseBranchDefaultHead(yylineno);}

// etc.
ConvertBool: %empty
    {$$ = Compiler::instance().ParseConvertBool(yylineno, $0);}
%%

void yyerror(const char * message)
{
	errorSyn(yylineno);
	exit(0);
}